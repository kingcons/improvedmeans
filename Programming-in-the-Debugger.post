;;;;;
title: Programming in the Debugger
tags: Programming
date: 2008-08-13 19:57:40
format: html
;;;;;
There's a quote I recalled reading on the internet and wanted to send to a friend recently but I couldn't find it. I stumbled across it today over on <a href="http://lambda-the-ultimate.org/">Lambda the Ultimate</a> and am archiving it here due to awesomeness. Lambda the Ultimate is a fantastic community centered around programming languages and there are many great discussions worth reading. This discussion starts off with the aforementioned quote which I'll excerpt here and goes on to discuss dynamism in languages, specifically as it relates to interactivity versus a specific typing discipline. Ready for the awesome quote? Good.<br><br><a href="http://lambda-the-ultimate.org/node/12">By way of Luke Gorrie over on Lambda the Ultimate</a>:<br><div class="content" style="padding-left: 30px;"><span>By way of Joe Marshall in <tt>comp.lang.lisp</tt>:</span><br><pre>Here's an anecdote I heard once about Minsky.  He was showing a<br>student how to use ITS to write a program.  ITS was an unusual<br>operating system in that the `shell' was the DDT debugger.  You ran<br>programs by loading them into memory and jumping to the entry point.<br>But you can also just start writing assembly code directly into memory<br>from the DDT prompt.  Minsky started with the null program.<br>Obviously, it needs an entry point, so he defined a label for that.<br>He then told the debugger to jump to that label.  This immediately<br>raised an error of there being no code at the jump target.  So he<br>wrote a few lines of code and restarted the jump instruction.  This<br>time it succeeded and the first few instructions were executed.  When<br>the debugger again halted, he looked at the register contents and<br>wrote a few more lines.  Again proceeding from where he left off he<br>watched the program run the few more instructions.  He developed the<br>entire program by 'debugging' the null program.</pre><br></div>

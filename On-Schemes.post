;;;;;
title: On Schemesâ€¦
tags: Linux, LISP
date: 2008-03-05 21:28:56
format: html
;;;;;
One thing I've been thinking about a lot lately (even if it's premature) is what <a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)#Implementation">scheme implementation</a> I want to settle on. Presumably at some point I'll be developing real applications. Or at least applications that I'll want to be able to pass along to one or two friends. At that point I'll need a way to pass said applications on without asking the friends to download and install the scheme environment themselves. See, Scheme is a <a href="http://en.wikipedia.org/wiki/Lisp_programming_language">LISP</a> and LISPs are interpreted languages. There are native code compilers but they're not guaranteed.<br><br>So, my wishlist for a scheme implementation was something that was fairly fast, had a good <a href="http://en.wikipedia.org/wiki/Foreign_function_interface">FFI</a> because we live in an inexorably <a href="http://memeagora.blogspot.com/2006/12/polyglot-programming.html">polyglot programming</a> age, could compile native binaries to be passed on to whomever without requiring a scheme install on their part, and decent library\module support. Other interesting features would be support for concurrency, documentation and community size, the corresponding development activity, and <a href="http://groups.google.com/group/comp.lang.scheme/msg/e1a107ccd60810a3">R6RS compliance (or plans of compliance)</a>.<br><br>This already cut my options down pretty quickly. The standout option was PLT Scheme/MzScheme. Bill Clementson proclaimed it <a href="http://bc.tech.coop/blog/040111.html">the best open source LISP</a> and in the general case I might agree with him. Now, I am another person that disagrees with DrScheme as an editor but I wouldn't let that stop me from using it. There's no reason one can't incorporate it into emacs, after all.<br><br>However, I couldn't find a way to force PLT Scheme to produce a standalone executable <a href="http://tachyon.elem.com/pltdoc/drscheme/drscheme-Z-H-2.html#node_sec_2.6">instead of a launcher</a> and a cursory google does not lend me to believe that there is any way. That's more or less a deal breaker for me. PLT Scheme has incredible momentum and fantastic module support but what's a guy to do? There may be a way <a href="http://64.233.167.104/search?q=cache:QCmDuRmb2OEJ:download.plt-scheme.org/doc/103p1/pdf/mzc.pdf+standalone+executable+mzscheme&amp;hl=en&amp;ct=clnk&amp;cd=1&amp;gl=us">in here</a> but I'm not really looking to embed MzScheme in whatever standalone I want to produce.<br><br>As I said, the options were already limited. <a href="http://en.wikipedia.org/wiki/Ikarus_(Scheme_implementation)">Ikarus</a> is of course the closest thing to R6RS but it's still sitting at 0.0.3. It's receiving heavy attention but I wouldn't use it yet. It's more something to <a href="https://code.launchpad.net/~aghuloum/ikarus/ikarus.dev">keep an eye on</a>. <a href="http://en.wikipedia.org/wiki/Scheme_48">Scheme48</a> and <a href="http://en.wikipedia.org/wiki/Scsh">Scsh</a> would be great for Unix scripting but I'm interested in something with a larger community and more cross-platform nature.  <a href="http://en.wikipedia.org/wiki/GNU_Guile">Guile</a> has limitations to it's garbage collector that I question, it was designed as an extension language, and the community seems fairly small.<br><br><a href="http://en.wikipedia.org/wiki/Bigloo">Bigloo</a>, <a href="http://en.wikipedia.org/wiki/Gambit_(Scheme_implementation)">Gambit</a>, and <a href="http://en.wikipedia.org/wiki/Chicken_Scheme">Chicken</a> were the remaining options and of the three Gambit swayed me over. It's hard to say what factors exactly did the trick. Bigloo, Gambit, and Chicken all have FFI's to C and will generate native code. All three have active communities and decent module systems. I think what really compelled me in the end were three things, Gambit had some <a href="http://www.iro.umontreal.ca/~gambit/bench.html">impressive benchmarks (even though they were on the Gambit homepage)</a>, I was compelled by <a href="http://snow.iro.umontreal.ca/?tab=Home">Snow as a package system</a>, and the fact that <a href="http://lambda-the-ultimate.org/node/841">Termite</a> is implemented on top of Gambit and it had such lightweight threads was highly compelling. After all, I do think concurrency via lightweight threads and message passing is going to matter a lot down the road so that was a pretty enticing bonus. As a final bonus, <a href="http://bitwize-devblog.livejournal.com/5566.html">it runs on the OLPC</a>.<br><br>So, now I had to figure out how to set it up. I won't keep you waiting but I should first note that I'll be installing the terminal (no-X) version of emacs because GTK emacs annoys me (aesthetically speaking).<br><pre><br>sudo apt-get install emacs-snapshot-nox gambc</pre><br>Create a desktop launcher thusly:<br><pre><br>locate emacs-snapshot.desktop<br>sudo nano /your/path/to/emacs-snapshot.desktop</pre><br>Change name to Emacs Snapshot (nox)<br>Change Terminal to true<br>Change Exec to /usr/bin/emacs-snapshot-nox)<br><br>Then install <a href="http://www.neilvandyke.org/quack/">quack</a>:<br><pre><br>cd /usr/share/emacs/site-lisp<br>sudo wget http://www.neilvandyke.org/quack/quack.el</pre><br>And to start out you'll want to edit your .emacs using<br><pre><br>sudo nano ~/.emacs</pre><br>to look something like this:<br><pre><br>(require 'quack)<br>(custom-set-variables<br>  ;; custom-set-variables was added by Custom.<br>  ;; If you edit it by hand, you could mess it up, so be careful.<br>  ;; Your init file should contain only one such instance.<br>  ;; If there is more than one, they won't work right.<br> '(quack-default-program "gsi")<br> '(quack-pretty-lambda-p t))<br>(custom-set-faces<br>  ;; custom-set-faces was added by Custom.<br>  ;; If you edit it by hand, you could mess it up, so be careful.<br>  ;; Your init file should contain only one such instance.<br>  ;; If there is more than one, they won't work right.<br> )</pre><br>And last but not least, a few choice commands:<br>C-x 1 kills all other windows<br>C-x C-s saves the buffer<br>C-x C-c exits immediately<br>M-x run-scheme RET drops you into the repl<br>C-d backs you out of runlevels<br>C-/ is undo<br>ESC-` Menu Bar<br><br>Snow will come next<a href="http://www.acooke.org/cute/GettingSta0.html">...</a>

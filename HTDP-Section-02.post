;;;;;
title: HTDP Section 02
tags: HTDP, LISP, Self-Learning, SICP
date: 2008-05-19 03:25:27
format: html
;;;;;
<p>So, I've finally gotten around to cleaning up <a href="http://www./&">SICP Section 1.3</a>. It's not quite done but it's damn close. For now, I want to start posting some of the <a href="http://en.wikipedia.org/wiki/How_To_Design_Programs">HTDP</a> code I've been writing to get back in the hacking habit over the past few days. I also have some of <a href="http://www.amazon.com/Concrete-Abstractions-Introduction-Computer-Science/dp/0534952119">Concrete Abstractions</a> done and in my source code repository but it's nothing substantial. Without further ado, here's HTDP Section 02 (of 43!). Sections 03 and 04 will go up tomorrow. Note: I skipped HTDP Section 01 because there are no exercises or problems whatsoever.<br /><br><!--more--><br /><br>Resources:<br /><br>Read: Sections <a href="http://htdp.org/2003-09-26/Book/curriculum-Z-H-4.html#node_chap_1">01</a> and <a href="http://htdp.org/2003-09-26/Book/curriculum-Z-H-5.html">02</a><br /><br>Watch: Nothing. To my knowledge there are no online lectures based around HTDP. Correct me if I'm wrong.<br /><br>Checked against: Nothing. Again, to my knowledge there are no available sources to check your answers beyond the locked solutions on the official site and message boards. That's one reason I'm excited about doing HTDP this way along with SICP. The plethora of SICP resources stand in contrast to an absolute dearth of resources for HTDP.</p><br><p>Exercises</p><br><p>2.1.1:<br /><br>Dr. Scheme does have operations for squaring (sqr x), computing sines (sin x), and finding maximums (max x). If you are not running in the HTDP Beginning Student Language though these functions may not be available.</p><br><p>2.1.2:</p><br><pre><br>(sqrt 4)<br>2<br>(sqrt 2)<br>#i1.4142135623730951<br>(sqrt -1)<br>0+1i<br><br>;;(tan x) determines the tangent of a given angle.<br></pre><br><p>2.2.1:</p><br><pre><br>(define (Fahrenheit->Celsius fahr)<br>  (* (- fahr 32) (/ 5 9)))</pre><br><p>The teachpack worked as intended. Just go to Language -> Add Teachpack. Feel free to test the different convert-*s on your own.</p><br><p>2.2.2:</p><br><pre><br>(define (dollar->euro dollars)<br>  (* .642 dollars)) ;; as of 05/18/08<br></pre><br><p>2.2.3:</p><br><pre><br>(define (triangle side height)<br>  (/ (* side height) 2))</pre><br><p>2.2.4:</p><br><pre><br>(define (convert3 first second third)<br>  (+ (* 100 third) (* 10 second) (* 1 first)))</pre><br><p>This was sort of counter-intuitive. The idea that this is related to something in an Algebra book is true but misleadingly so. You could try to do something fancy with max but that's not the idea.</p><br><p>2.2.5:</p><br><pre><br>(define (f n)<br>  (+ (/ n 3) 2))<br><br>;;The evaluations for 2, 5, and 9 are 2.6, 3.6 and 5, respectively.<br><br>(define (f n)<br>  (+ 10 (sqr n)))<br><br>;;The evaluations for 2 and 9 are 14 and 91, respectively.<br><br>(define (f n)<br>  (+ 20 (* (sqr n) .5)))<br><br>;;The evaluations for 2 and 9 are 22 and 60.5, respectively.<br><br>(define (f n)<br>  (- 2 (/ 1 n)))<br><br>;;The evaluations for 2 and 9 are 1.5 and 1.8, respectively.</pre><br><p>2.3.1:</p><br><pre><br>(define (tax income)<br>  (* .15 income))<br><br>(define (netpay hrs)<br>  (- (wage hrs) (tax (wage hrs))))<br><br>;;supplementary functions:<br>(define (wage hrs)<br>  (* 12 hrs))</pre><br><p>2.3.2:</p><br><pre><br>(define (sum-coins pennies nickels dimes quarters)<br>  (+ (* .01 pennies) (* .05 nickels) (* .1 dimes) (* .25 quarters)))<br></pre><br><p>2.3.3:</p><br><pre><br>(define (total-function attendees)<br>  (- (* 5 attendees) (+ 20 (* .5 attendees))))<br></pre><br><p>2.4.1:<br /><br>(10) causes the interpreter to expect a function, procedure or expression but it is in fact primitive data, i.e. a number.<br /><br><br>(10 + 20) is incorrect because the expression uses infix rather than prefix notation but the error from the interpreter is the same. This is due to the fact that the interpreter has been given a number rather than an procedure as it's operator.<br /><br><br>(+ +) fails because the operator + is only given one argument (it requires a minimum of two) and that argument is a function which is the wrong type of input.</p><br><p>2.4.2:</p><br><pre><br>(define (f x)<br>  (+ x 10))<br>;;The argument to f needed to be changed.<br><br>(define (g x)<br>  (+ x 10))<br>;;There was a missing open-paren before the + operator.<br><br>(define (h x)<br>  (+ x 10))<br>;;The open-paren was in front of x when it should have been in front of h.</pre><br><p>2.4.3:</p><br><pre><br>;;> (+ 5 (/ 1 0))<br>;;/: division by zero<br>;;> (sin 10 20)<br>;;sin: expects 1 argument, given 2: 10 20<br>;;> (somef 10)<br>;;reference to an identifier before its definition: somef<br></pre><br><p>2.4.4:</p><br><pre><br>(define (somef x)<br>  (sin x x))<br><br>;;> (somef 10 20)<br>;;somef: this procedure expects 1 argument, here it is provided 2 arguments<br>;;> (somef 10)<br>;;sin: expects 1 argument, given 2: 10 10</pre><br><p>The section ends with a bit on program design. It makes the important note of having human solved examples to test against. Sounds like an argument for unit tests to me.</p>

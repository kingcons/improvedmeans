;;;;;
title: A Computer Science Undergraduate Education for Under $1,000
tags: Books, Lists, Self-Learning
date: 2008-06-09 18:52:59
format: html
;;;;;
In the style of my former post on a <a href="http://blog.kingcons.io/posts/Its-True.html">Math Undergraduate Education</a>, this post proposes a list of texts suitable for a rigorous and well-rounded foundation in Undergraduate Computer Science. A future post will cover the philosophical details and practical implementation of such an approach.<br><br>This list skews towards theory rather than practicality (or Computer Science as opposed to Programming, if you prefer) but tries to maintain a suitable balance. Consequently, outside study of particular languages (e.g. ruby, php, html, css, javascript, erlang or haskell, python or lua) is assumed. It is advised to work on practical projects (setting up source code repositories and servers, open source software contribution, web development, etc) as applicable since these subjects are covered at best loosely during the course of study.<br><br>This list of 24 texts costs about 900 dollars when bought used off of Amazon.com. Click on the book's title to get forwarded to it's Amazon.com page. The ordering of the list loosely conforms to increasing difficulty but it is not a recommendation as to structure. I will probably delve into those details in the aforementioned future post.<br><br><a href="http://www.amazon.com/How-Design-Programs-Introduction-Programming/dp/0262062186">How To Design Programs by Matthias Felleisen, Matthew Flatt, Robert Findler and Shriram Krishnamurthi</a><br><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262011530/ref=pd_bxgy_b_text_b">Structure and Interpretation of Computer Programs by Harold Abelson and Gerald Sussman</a><br><a href="http://www.amazon.com/Paradigms-Artificial-Intelligence-Programming-Studies/dp/1558601910/ref=pd_sim_b_title_6">Paradigms of Artificial Intelligence Programming by Peter Norvig</a><br><a href="http://www.amazon.com/Algorithms-Sanjoy-Dasgupta/dp/0073523402/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1213032179&amp;sr=1-1">Algorithms by Sanjoy Dasgupta, Christos Papadimitriou and Umesh Vazirani</a><br><a href="http://www.amazon.com/gp/product/0262032937/ref=pd_cp_b_2?pf_rd_p=317711001&amp;pf_rd_s=center-41&amp;pf_rd_t=201&amp;pf_rd_i=0073523402&amp;pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_r=0X96HKCRJFMTQ9E7GD65">Introduction to Algorithms by Thomas Cormen, Charles Leiserson, Ronald Rivest and Clifford Stein</a><br><a href="http://www.amazon.com/Computer-Networks-Andrew-S-Tanenbaum/dp/0133499456/ref=ed_oe_h">Computer Networks by Andrew Tanenbaum</a><br><a href="http://www.amazon.com/Programming-Language-Pragmatics-Second-Michael/dp/0126339511/ref=ed_oe_p">Programming Language Pragmatics by Michael Scott</a><br><a href="http://www.amazon.com/Computer-Organization-Design-Hardware-Interface/dp/0123706068/ref=pd_sim_b_title_3">Computer Organization and Design by David Patterson and John Hennessy</a><br><a href="http://www.amazon.com/Introduction-Computing-Systems-gates-beyond/dp/0072467509/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1213035196&amp;sr=1-1">Introduction to Computing Systems by Yale Patt and Sanjay Patel</a><br><a href="http://www.amazon.com/Operating-System-Concepts-Windows-Update/dp/0471250600/ref=sr_1_4?ie=UTF8&amp;s=books&amp;qid=1213035537&amp;sr=1-4">Operating System Concepts by Abraham Silberschatz, Greg Gagne and Peter Galvin</a><br><a href="http://www.amazon.com/Operating-Systems-Design-Implementation-Second/dp/0136386776/ref=ed_oe_h">Operating Systems: Design and Implementation by Andrew Tanenbaum and Albert Woodhull</a><br><a href="http://www.amazon.com/Humane-Interface-Directions-Designing-Interactive/dp/0201379376">The Humane Interface by Jef Raskin</a><br><a href="http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670/ref=pd_sim_b_title_20">Code Complete by Steve McConnell</a><br><a href="http://www.amazon.com/Real-Time-Rendering-Third-Tomas-Akenine-Moller/dp/1568814240/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1274274001&amp;sr=1-1">Real-Time Rendering by Tomas M'Oller</a><br><a href="http://www.amazon.com/Artificial-Intelligence-Modern-Approach-Prentice/dp/0137903952/ref=pd_sim_b_title_9">Artificial Intelligence by Stuart Russell and Peter Norvig</a><br><a href="http://www.amazon.com/Introduction-Theory-Computation-Second-Michael/dp/0534950973/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1213036027&amp;sr=1-1">Introduction to the Theory of Computation by Michael Sipser</a><br><a href="http://www.amazon.com/Modern-Cryptography-Practice-Hewlett-Packard-Professional/dp/0130669431/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1213036076&amp;sr=1-1">Modern Cryptography: Theory and Practice by Wenbo Mao</a><br><a href="http://www.amazon.com/Hackers-Delight-Henry-S-Warren/dp/0201914654">Hacker's Delight by Henry Warren</a><br><a href="http://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki/dp/0521663504">Purely Functional Data Structures by Chris Okasaki</a><br><a href="http://www.amazon.com/Compilers-Principles-Techniques-Tools-2nd/dp/0321486811/ref=pd_sim_b_title_28">Compilers: Principles, Techniques, and Tools by Alfred Aho, Monica Lam, Ravi Sethi and Jeffrey Ullman</a><br><a href="http://www.amazon.com/Lisp-Small-Pieces-Christian-Queinnec/dp/0521545668/ref=pd_sim_b_title_27">Lisp In Small Pieces by Christian Queinnec</a><br><a href="http://www.cs.brown.edu/~sk/Publications/Books/ProgLangs/2007-04-26/">Programming Languages: Application and Interpretation by Sriram Krishnamurthi</a><br><a href="http://www.amazon.com/Types-Programming-Languages-Benjamin-Pierce/dp/0262162091/ref=pd_sim_b_title_4">Types and Programming Languages by Benjamin Pierce</a><br><a href="http://www.amazon.com/Concepts-Techniques-Models-Computer-Programming/dp/0262220695/ref=pd_sim_b_title_14">Concepts, Techniques, and Models of Computer Programming by Peter Van Roy and Seif Haridi</a><br><br>There are a few caveats to this list that should be noted.<br><br>1) As mentioned it does not presume to teach language-specific or platform-specific knowledge. It is slanted towards theory and books on how to write C or HTML, do Linux Kernel Development or learn the Win32 API, or work with OpenGL or TCP/IP should be purchased separately.<br><br>2) Since it does not deal heavily with specific languages, it does not make any prescriptions about what languages one should know. Generally, I believe it's good to know a language which epitomizes each of the major programming paradigms whether these paradigms are valid or not (as Krishnamurthi posits in PLAI). This means at least one OO language, one stack-based language, one functional language, and one logic/constraint language. I'd recommend Smalltalk for Object Orientation, Forth for a stack language, Erlang or Haskell for a functional language, and Prolog for a constraint language. Beyond that it would probably be reasonable to learn C as a good representation of the von Neumann architecture and "for culture" and hypothetically python, perl, or ruby to learn a web/glue/scripting language.<br><br>3) The list could certainly be shorter. It leans towards functional programming, lisp, and programming languages due to my own personal interests and some material could be omitted from those areas correspondingly. Notably, Distributed Systems and Databases are conspicuous absences from my list. This is because I have yet to find any sort of consensus about quality books on either subject. I'm not interested in Databases but I'm certainly interested in Distributed Systems. Computer Networks is about as close as this list gets.<br><br>The beauty of this list, if there is one, is that the basis is strong enough that one could jump off in any direction after it's completion. If you were interested in video games get more books on rendering and physics, if you're interested in cryptography and security get more books on that, etc, but the foundation should be strong enough for any direction you'd like to go in. This list may get updated in the future. It's far from perfect but it does seem to me like a pretty reasonable place to start.

;;;;;
title: Ye Olde Smorgasborg
tags: LISP, Personal
date: 2011-05-06 21:18:23
format: html
;;;;;
<h2>Updates</h2><br>This post may come off as a bit scattered. The main reason is that so much has been going on. I've finished my last semester at SPSU and should be picking up my diploma soon, I've been running around looking for a loft to move into with my friend Burke come late June and I've been working on getting a job. There's been progress on all of those fronts and I look forward to writing about them soon. Finally, I have a new Lisp project that I've been having fun hacking on and wanted to talk about. I was going to wait until I was ready to release version 0.1 but it's beginning to seem like that might be a few months out and I just can't help myself. I'll talk mostly about my motivations, design goals, some early results, my immediate plans and similar work others have begun recently.<br><br><h2>Motivations</h2><br>The project is a piece of Lisp blog software I've christened "Coleslaw". I've wanted to write my own blog for a while for a variety of reasons. The most significant is that it would be a good learning experience and fun. Additionally, then I could just run SBCL and PostgreSQL on my servers and scrap MySQL and PHP. I'd been putting it off for some time as I'm no web development expert but I had an opportunity to get course credit for working on it some this semester so I decided to get the ball rolling.<br><br>Lately a piece of Ruby blogware named <a href="http://github.com/mojombo/jekyll">Jekyll</a> became surprisingly popular. There are two interesting things about Jekyll to me. The first is that it uses a static-site compilation model rather than generating pages dynamically (as Wordpress does). The second is that it requires and provides no admin-interface as a result. It simply watches a directory for new posts and regenerates as much of the site as necessary.<br><br>The simplicity (and somewhat simpler security model) of writing blogware that didn't have an admin interface and just keeping everything in flat files really appealed to me but I knew many people still love admin interfaces and database backed webapps and for good reason. Though you should always have backups of course. Anyway, it's thanks to Jekyll and several <a href="http://jaspervdj.be/hakyll/">similar</a> <a href="http://wiki.call-cc.org/eggref/4/hyde">clones</a> that I really started looking into the design of something that could support both options.<br><br><h2>Design Goals</h2><br>The original design goals were to support a *single-user* blog with either a dynamic backend that provided an admin interface and made use of a database or a static backend that simply compiled posts from a watched directory to an HTML output directory. Since then I've decided a bit more separation of concerns is in order. Down the line I'd like to support the following "large-scale" options with Coleslaw:<br>	<li>Where is the data? (mongodb, postgresql, flat files, lisp data persisted with cl-store or similar, etc)</li><br>	<li>How is the data served? (Static files, Dynamically generated w/optional caching)</li><br>	<li>How is the data edited? (web-admin-interface-p)</li><br>	<li>Who serves the data? (S3, Lisp server (hunchentoot/etc), System HTTPD (lighttpd/apache/etc)</li><br>	<li>How are comments handled? (Cloud service (disqus/etc), Stored and generated locally, disabled)</li><br>Above and beyond that I'd like to have a few bundled plugins for things like Analytics, Syntax Hightlighting, LaTeX support, Import from other blogs, Crossposting. Finally, Coleslaw should be easy to theme.<br><br><h2>Early Results</h2><br>The code is presently <a href="http://github.com/redline6561/coleslaw/">on github</a> and I haven't hacked on it for a few days because I've been relaxing post-finals. That said, I'm looking forward to getting back into working on it in the near future. At this time, only the static backend has been started and there's still no implementation for directory watching to update posts. Comment support also hasn't been completed. That said there's a preliminary theme (stolen from ckeen's hyde, thanks ckeen!) and an <a href="http://blog.clockwork-webdev.com/">example site</a> running backed by S3. Note that the posts shown are all imported from an XML export of my Wordpress blog. The current import plugin only supports wordpress and only handles posts, not comments. The code used to generate the example site was <a href="http://paste.lisp.org/display/121736">pasted here</a>.<br><br>I feel pretty solid about the internal API for indexes and posts and my plugin infrastructure as well as the theming situation. cl-fad, local-time, cl-closure-template, cl-docutils and cl-markdown are the current hard dependencies for the core because I'd like to support ReStructuredText, HTML or Markdown input for posts. Just for giggles my friend Neil also made a logo in large, medium and small. Here's medium: <img src="https://github.com/redline6561/coleslaw/raw/master/logo_medium.jpg" alt="Medium Coleslaw Logo" /><br><br><h2>Immediate Plans</h2><br>I started working on plugins for <a href="http://disqus.com/">disqus</a> comment support as well as <a href="http://mathjax.org/">mathjax</a> LaTeX support but the whole experience made me want to revamp my API for "injections" which allows plugins to throw various bits of JS in the page HEAD and BODY. I'd like to support arbitrary predicates (say, to only add the mathjax scripts when posts are tagged "math") and allow for distinguishing between whether something should be injected on post pages or index pages in addition to the current "should I inject this in the HEAD or BODY?" functionality. Once that's done, I'd like to support syntax highlighting via Python's pygments library. Then I'll get around to the directory watching/updating semantics. Once that's done I can work on the dynamic backend and start *THINKING* about a 1.0. That's the state of things today. I'd love to hear from you if you have thoughts, opinions or a desire to contribute patches/help. :D<br><br><h2>Recent Similar Efforts</h2><br>I've found it pretty comical that 2 other (more experienced and talented) lispers recently began writing lisp blog software shortly after I started working on coleslaw. Who knows, if they had gotten around to it 6-9 months earlier I might never have wound up working on coleslaw, but I'm glad I have. It's a lot of fun.<br><br>If you find coleslaw interesting it's worth looking at <a href="http://cyrusharmon.org/projects?project=nuclblog">nuclblog</a>(cl-store serialized data, dynamic, Markdown) by Cyrus Harmon (<a href="https://github.com/slyrus">slyrus</a>), <a href="https://github.com/billstclair/Lisplog">lisplog</a>(drupal import, custom flat file database, dynamic) by Bill St. Clair (<a href="http://github.com/billstclair">billstclair</a>) and <a href="https://github.com/archimag/arblog">arblog</a>(mongodb-backed, dynamic, ReStructuredText) by Andrey Moskvitin (<a href="https://github.com/archimag">archimag</a>).

;;;;;
title: Trying to Stay Ahead
tags: Linkpost, Personal, Programming Languages
date: 2009-03-04 16:31:57
format: html
;;;;;
There are a bunch of links I want to dump out of my browser and I can't think of a coherent way to do so. Here we go:<br><br>The berrics has finally wrapped up. Unbelievably, <a href="http://theberrics.com/dailyopspost.php?postid=836">I predicted Benny Fairfax's defeat of PJ Ladd</a>. What a Long Shot. That match was awesome. Similarly the <a href="http://theberrics.com/dailyopspost.php?postid=837">PJ Ladd vs Billy Marks</a> match was damn fine. I feel a little robbed about Marc Johnson still but I made decent predictions.<br><br>The <a href="http://arstechnica.com/tech-policy/news/2009/03/doj-releases-abjures-bush-administration-surveillance-memos.ars">Bush Administration's legal counsel was the devil</a>. I don't really have any good words for this. I told you so maybe? *sigh*<br><br>This is a <a href="http://speedbird.wordpress.com/2008/01/19/back-by-popular-demand-the-minimal-compact/">minimal social compact for the 21st century</a>. I've only read bits and pieces of it and need to go through it again but it's hella cool.<br><br>Copyright is really going to struggle to figure out the 21st century and the consumer products it's bringing. Just check out this <a href="http://arstechnica.com/tech-policy/news/2009/02/kindles-and-creative-machines-blur-boundaries-of-copyright.ars/">Ars Technica piece revolving around the kindle</a>. New media is continuing to eat old media's face. (See: newspapers folding)<br><br>Miru Kim takes pictures of herself in abandoned industrial complexes and urban ruins. It's rather interesting and at the very least there are some <a href="http://www.mirukim.com/nakedcityspleen/freedom.html">good photos</a>. She feels compelled to take them nude though so it's <a href="http://en.wikipedia.org/wiki/NSFW">NSFW</a>. She also <a href="http://www.ted.com/index.php/talks/miru_kim_s_underground_art.html">gave a lecture about it</a>. The Bennett School is interesting and the Catacombs and St Jacques are just crazy. I don't know what I think.<br><br>I believe I posted a link to this before but just in case I still find a bunch of futurists bantering on about the direction of things to be interesting most of the time. So here is <a href="http://www.well.com/conf/inkwell.vue/topics/343/Bruce-Sterling-State-of-the-Worl-page02.html">The State of the World in 2009 with the Well and Bruce Sterling</a>.<br><br>While we're on futurism I might as well mention that genetics is exploding and it won't be long before we're all seeing it. For the record, I do think we should be careful and concerned but if we take the right precautions I promise that <a href="http://arstechnica.com/science/news/2009/02/scientists-learning-to-program-synthetic-life-with-dna.ars">synthetic biology will be flipping awesome</a>. Also <a href="http://arstechnica.com/science/news/2009/02/storing-solar-energy-by-turning-over-a-new-leaf.ars">maybe solar power will close the gap at last</a>. Go figure that the simple, elegant solutions are the right ones.<br><br>If you think Computer Architecture isn't in the middle of drastic upheaval for the first time in two decades, <a href="http://arstechnica.com/hardware/news/2009/03/atom-cant-feed-rd-monster-intel-outsources-chips-to-tsmc.ars">read this</a> and then punch yourself in the face. Okay, so maybe that's not as indicative of the upheaval as it could be but I don't have a solid link explaining the shift to multicore architectures (probably) featuring simpler individual cores. Anyway, it's fairly interesting that the industry heavyweight (i.e. Monopoly) may have to completely reinvent itself depending on what the market does at this crucial juncture.<br><br>I know you readers care about multicore support in Programming Languages. Neat GHC mutterings in a <a href="http://ghcmutterings.wordpress.com/2009/03/03/new-paper-runtime-support-for-multicore-haskell/">new paper</a>. Can we expect GHC 6.12 in the next few months? While we're on Haskell, I thought that <a href="http://www.haskell.org/pipermail/haskell/2009-February/021052.html">this library</a> to automatically generate typesafe bindings to C code was pretty f-in awesome. If we have to deal with the legacy of C code, this should help tons. Hackage gets more useful by the day. Other papers? You got it. Lambda the Ultimate helped me stumble on this <a href="http://www.cse.ucsd.edu/~rtate/publications/eqsat/">interesting approach to Compiler Optimization</a> from some smart doctorate seeker named <a href="http://www.cse.ucsd.edu/~rtate/">Ross Tate</a>.<br><br>A while back an article called <em>Hard Work and Practice in Programming</em> got posted to both <a href="http://news.ycombinator.com/item?id=404775">hackernews</a> and the <a href="http://www.reddit.com/r/programming/comments/7kvax/hard_work_and_practice_in_programming/">programming reddit</a> and generated a lot of comments. It was both discouraging and motivating at the same time. I'm afraid of all the work I'd have to do to know all I want to know but I'm slowly moving in the right direction. That's actually what's been distracting me lately and what the title of this post is about. I want to be ahead of the curve and able to deal with parallelism. There are few <em>programming languages</em> in which that's even possible and that'll only become more pronounced and important in the coming years. Moreover, I know that whatever I end up doing with programming the language I write code in makes a difference to me in how much I enjoy it.<br><br>Some languages I like more than others, some paradigms feel more productive or sensible to me than others. Unfortunately, my tastes lean towards the esoteric which means that to work professionally in the languages I like it might require a Phd unless the market starts adopting them pretty quick. Or at least a Masters. There's a lot of mathematics involved and I could stand to brush up on my Calculus as it is. Ah, well. I really just need to shoot a sheepish e-mail to <a href="http://donsbot.wordpress.com/about/">Don Stewart</a> or <a href="http://www.serpentine.com/blog/">Bryan O'Sullivan</a> asking what I can do beyond getting my BS and writing Haskell and Lisp to be prepared to get jobs at a place like Galois.<br><br>Then again, I think part of my concern is that while getting a job writing High Assurance would at least be fun, challenging and use Haskell, I'm not sure my passion is in <em>somebody else's software</em>. On the other hand, I haven't figured out what I want software to do for me yet. Hopefully working through the BS will point to some ideas. I still have the idea of a social network for self-schooling or autodidacts lingering in the back of my head. School's fine but I've always wanted a bit more flexibility than I've been able to get at the institutions I've attended.<br><br>Speaking of the math involved, I've been harboring an interest in Category Theory lately due to Haskell and <a href="http://dekudekuplex.wordpress.com/2009/01/19/motivating-learning-category-theory-for-non-mathematicians/">I really enjoyed this man's story</a>. I may be a theory learner myself. I definitely appreciate working through the abstract in SICP a lot more than working through some arbitrary example in CS class. Anyway, there's more to gather from this and maybe with a bit of work I'll actually be able to tackle Herstein's Topics in Algebra. It's been calling my name for a little while. Well, more later. I've got a midterm to finish.

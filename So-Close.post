;;;;;
title: So Close and Yet So Far
tags: lisp
date: 2013-03-16 12:22:00
format: md
;;;;;
<img src="http://redlinernotes.com/images/famiclom_progress3.png"
     alt="Famiclom Progress" align="right" />


<br/>
> "Low-level programming is good for the programmer's soul." - John Carmack, [via ahefner](http://ahefner.livejournal.com/20528.html)

> ["What I like about Lisp is that you can feel the bits between your toes."](http://compgroups.net/comp.lang.lisp/feeling-the-bits-between-your-toes/696643) - Drew McDermott, [via Michael Weber](http://www.foldr.org/~michaelw/log/programming/lisp/icfp-contest-2006-vm)
<br/>

<br/>
## Previously...
I never did enough systems programming. In college, I actually convinced my Operating Systems professor to let me do the course project in lisp. So when I decided I wanted to get closer to the metal a year ago, I thought I'd look into Nintendo emulation with Common Lisp rather than systems hacking with C. Besides, my needs for a web server or other daemons were filled. So I embarked on that weird journey and came out with a shiny, readable, reasonably fast 6502 CPU emulator in under 800 lines of code. It even has an assembler and disassembler!

## Announcing Famiclom version least-positive-fixnum
But a CPU emulator isn't much fun. No graphics, no sound, no I/O! After a break from September through January I got back to work in earnest a month ago. It started with getting Klaus Dorfmann's [exhaustive correctness tests](http://forum.6502.org/viewtopic.php?f=2&t=2241&sid=1e71a8a5f865ab8e503d081be7743dd4) for the CPU [added to my testsuite](https://github.com/redline6561/cl-6502/commit/aa90f1ee4c638e3cf2e70ad8535ae0bcba9461c5) and a lot of bugfixing. Then I used pcwalton's [lovely Rust code](https://github.com/pcwalton/sprocketnes) as inspiration and started getting the [memory mappers](http://wiki.nesdev.com/w/index.php/Mapper) and PPU (graphics) working with lispbuilder-sdl. So far we only support NROM mapped games though MMC1 should be coming soon(tm). As you can see at the top of the post, there are still some rendering bugs to work out. All testing so far has been done on CCL and SBCL on Linux.

## Current Status
The good news is that the CPU, PPU, and [.nes file reading](http://github.com/redline6561/romreader) are all done in ~1570 lines of Lisp code! The CPU in particular I think makes for quite nice reading at this point. The [main NES code](http://github.com/redline6561/famiclom) still needs work. The bad news is that while the CPU runs at 2-3x the speed of the NES the graphics are about 15-20x **slower** so I'm going to have to spend some time optimizing. I'm in #lisp on freenode regularly and would love advice or patches from any low-level SBCL or lispbuilder-sdl hackers. :)

## Where to next?
1. Preliminary input handling is written, hook it into the main event loop.
2. Finish MMC1 loader. Get Mega Man 2 title screen loading at least.
3. Fix rendering bugs and try to play a few games.
4. Optimize and/or add audio support!

;;;;;
title: Setting up a Mercurial VCS on Ubuntu
tags: Linux
date: 2008-04-22 17:47:37
format: html
;;;;;
I've been meaning to set up a <a href="http://en.wikipedia.org/wiki/Revision_control">Version Control System</a> for a long time now. VCS as a concept has been around for a while but recently a new paradigm in VCS called DVCS (for distributed version control system) has emerged. This new paradigm has cured or at least mitigated the warts of the old "centralized" version control systems and brought new benefits. The thing is there hadn't been a dominant VCS up until now and though some would argue to the contrary I would claim there still isn't. This article strives not to be concerned with the choice of a DVCS. The truth if you choose any of the 4 relatively high-profile DVCS systems that exist today (<a href="http://en.wikipedia.org/wiki/Darcs">darcs</a>, <a href="http://en.wikipedia.org/wiki/Bazaar_(software)">bazaar</a>, <a href="http://en.wikipedia.org/wiki/Mercurial_(software)">mercurial</a>, or <a href="http://en.wikipedia.org/wiki/Git_(software)">git</a>) you'll be able to migrate between any of them later without too much difficulty if you change your mind. I was initially leaning towards bazaar or git but eventually settled on (and am thus far quite happy with) mercurial. If you must know some of my reasoning I find that <a href="http://www.dribin.org/dave/blog/archives/2007/12/30/why_mercurial/">Dave Dribin has captured</a> something close to my opinions.<br><br>So, the three things I'd like to cover in this article are mostly covered in <a href="http://www.selenic.com/mercurial/wiki/index.cgi/QuickStart">two</a> or <a href="http://www.selenic.com/mercurial/wiki/index.cgi/PublishingRepositories">so</a> places on the mercurial site. I thought I'd group it all together here for simplicity and future reference. The three things I'll be covering are the initial setup including installation and repository creation, making that repository accessible via web browser through a cgi script, and then setting up some authentication to allow you to push changes over HTTP. Let's get started!<br><br>Initial Setup<br>Installation of the software is really straightforward on Ubuntu (see the mercurial site for other installs). Just run<br><code>sudo apt-get install mercurial</code> and you're done. You'll have to set one thing in your configuration file before you can make your repository. Insert the following in ~/.hgrc with nano:<br><code><br>[ui]<br>your_username = FirstName LastName <youremail@host.com></code><br><br>Your next step of course will be to create a repository. For this, I assume you have some code you'd like stored. I make no claims about what will happen if you try creating an empty repository. It is also worth noting that mercurial tracks content, not files, so it won't carry empty directories. You can work around this on Linux by dropping a hidden file in the directory like so: <code>touch dirname/.hidden</code>.<br>Once you've done that navigate to the directory you'd like the repo to be in and run the following commands:<br><code><br>hg init<br>hg add<br>hg commit</code><br><br>This should bring up nano for you to enter a commit message into describing what changes you're making. Type in a message, save and exit nano. Now you can check and see if this was successful with <code>hg log</code>. If there are no changes listed or exiting nano generated an error you should check your file permissions and see if entering the [ui] information in another config file (perhaps /etc/mercurial/hgrc) fixes the problem.<br><br>Setting up the Web Server<br>I'm assuming that you already have a working repo (naturally) and an install of apache at this point. If you don't have the apache install try running <code>sudo apt-get install apache2</code>. There should be a copy of the cgi script mercurial uses in /usr/share/doc/mercurial/examples/. Copy that to /var/www/cgi-hg/ and rename it index.cgi, then open it up with nano. Around the the third to last line (under def make_web_app) you should see something like:<br><code><br>return hgweb("/path/to/your/repo", "Your Repo Description Here")</code><br><br>Fill in those values with your information but preserving the quotation marks. Also make sure to remove the comments (#s) before import os and import sys. Finally, be sure to run <code>sudo chmod a+x index.cgi</code> on the file so that Apache can execute it. You'll need to edit your apache config file so fire up nano again and open /etc/apache2/apache2.conf to insert the following:<br><code><br>Alias /code /var/www/cgi-hg<br><directory "/var/www/cgi-hg"><br>    DirectoryIndex index.cgi<br>    AddHandler cgi-script .cgi<br>    Options ExecCGI<br>    Order allow,deny<br>    Allow from all<br></directory></code><br><br>Finally, restart the server with <code>sudo /etc/init.d/apache2 restart</code> and try navigating your web browser to yourdomain.com/code.<br><br>Adding Push Support<br>Use nano to open your_repo/.hg/hgrc (not ~/.hgrc) again. This time we're putting in the server configuration and it should look something like this:<br><code><br>[web]<br>allow_push = your_username<br>push_ssl = false</code><br><br>Now you'll have to set up a file to hold the passwords for the users you want to allow to upload changes. To create it and add the first user and password run <code>sudo htpasswd -c /etc/apache2/hg.pass your_username</code> but make sure to omit the -c argument when adding new users in the future or the file will be overwritten. Then you'll need to set up apache to check this information. Open /etc/apache2/conf.d/hg.conf in nano and add the following:<br><code><br><location /code><br>    AuthUserFile /etc/apache2/hg.pass<br>    AuthGroupFile /dev/null<br>    AuthName "Your Repository Name"<br>    AuthType Basic<br>        <limitExcept GET><br>        Require valid-user<br>        </limitExcept><br></location></code><br><br>Save and exit nano. You'll need to change the permissions on the repo tree to allow apache to write to it so run <code>sudo chown -R www-data:www-data /path/to/your/repo</code> and then restart the apache server again. That's it! Time to test it...<br><br>***BONUS ROUND***<br>To test your setup, go to another computer and use apt-get to install mercurial and set your username in the ~/.hgrc. Then run <code>hg clone http://yourdomain.com/code</code> and you should see mercurial make a clone off of your server. Open one of the cloned files and make a small edit or add some new files, whatever you like. When you're done run <code>hg add</code> and <code>hg commit</code> remembering to add commit messages. If you need to delete a file do it through <code>hg remove filename</code>. Finally, try pushing your changes back to the server by running <code>hg push http://yourdomain.com/code</code>. You should get asked for a username and password and if you give valid login information your changes should push through. Now navigate to http://yourdomain.com/code in the browser and see if the changes show up. If they do, you're off to the races.

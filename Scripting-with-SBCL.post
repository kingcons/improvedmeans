;;;;;
title: Scripting with SBCL
tags: LISP, Programming
date: 2009-09-09 17:40:14
format: html
;;;;;
Over the labor day weekend, I had fun. I avoided dreary schoolwork, I played guitar, I hung out with <a href="http://trashed-ideas.net/">cool</a> <a href="http://krow684.livejournal.com/">people</a>, I celebated my second anniversary with a <a href="http://redlinernotes.com/images/she_is_hardcore.jpg">lovely lady</a>, I wrote code.<br><br>One bit of code I worked on is a script to read in AT&T call logs and figure out the 5 people you call most often. As you might guess, this can be useful for people contemplating switching to T-Mobile (say, for an <a href="http://maemo.nokia.com/n900/">upcoming piece of hardware</a> designed for their 3G network). In short, the script is run from the command prompt with <code>./myfaves.lisp</code> and prints out the 5 people you've talked to the most based on your call logs and the total percentage of your minutes those calls account for. The call logs this script processes can be downloaded from wireless.att.com. Login to your wireless.att.com account, go to "Bill & Payments". Under "Wireless Statement Summary" click the "Call Details" tab and finally scroll down a bit and click "Download Call Details". Using the dropdown box, select each month then click CSV format and submit. Put all those files in the same directory and then execute the following lisp script from that directory.<br><br><pre lang="lisp"><br>#!/usr/bin/sbcl --script<br>(declaim (sb-ext:muffle-conditions style-warning))<br><br>(eval-when (:compile-toplevel :load-toplevel :execute)<br>  (let ((*standard-output* (make-broadcast-stream))<br>	(*error-output* (make-broadcast-stream)))<br>    (require 'asdf)<br>    (require 'split-sequence)<br>    (require 'osicat)<br>    (require 'cl-containers)))<br>  <br>(defpackage :my-faves<br>  (:use :common-lisp :cl-containers :osicat)<br>  (:import-from split-sequence split-sequence))<br><br>(in-package :my-faves)<br><br>;; ATT CSV info<br>;; call logs start on line 24, entries on every other line (evens)<br>;; voice calls final line starts with "Totals"<br>;; 5th comma-entry is number, 7th is duration in minutes<br><br>(defparameter *months* nil)<br>(defparameter *results* (make-array 6 :fill-pointer 0))<br>(defparameter *call-log* (make-container 'sorted-list-container<br>					 :test #'equal<br>					 :key #'car<br>					 :sorter #'string<))<br><br>(defun init ()<br>  (loop for path in (list-directory (truename ".")) do<br>    (let* ((pathstr (native-namestring path))<br>	   (ext (subseq pathstr (- (length pathstr) 3))))<br>      (when (string= "csv" ext)<br>	(push path *months*)))))<br><br>(defun find-faves ()<br>  (loop for file in *months* do<br>    (load-calls file))<br>  (analyze-data)<br>  (print-results))<br><br>(defun load-calls (path)<br>  (catch 'load-calls<br>    (with-open-file (in path)<br>      (loop for i from 1 to 23 do<br>	(read-line in nil))<br>      (loop for line = (read-line in nil) do<br>	(parse-call line)))))<br><br>(defun parse-call (csv-line)<br>  (cond ((string= "" csv-line))<br>	((finished-voice csv-line) (throw 'load-calls 'done))<br>	(t (let* ((split-line (split-sequence #\, csv-line))<br>		  (number (fifth split-line))<br>		  (minutes (parse-integer (seventh split-line))))<br>	     (insert-call-sorted number minutes)))))<br><br>(defun finished-voice (csv-line)<br>  (string= "Totals" (subseq csv-line 0 6)))<br><br>(defun insert-call-sorted (number minutes)<br>  (let ((present (search-for-item *call-log* number :key #'car)))<br>    (if present<br>	(incf (cdr (search-for-item *call-log* number :key #'car)) minutes)<br>	(insert-item *call-log* (cons number minutes)))))<br><br>(defun analyze-data ()<br>  (ensure-sorted *call-log*)<br>  (sort-elements *call-log* #'> :key #'cdr)<br>  (loop for number from 0 to 4 do<br>    (vector-push (item-at *call-log* number) *results*))<br>  (let ((total-free (loop for i from 0 to 4 summing (cdr (aref *results* i))))<br>	(total-mins (reduce-elements *call-log* #'+ :key #'cdr)))<br>    (setf (aref *results* 5) (round (* 100 (/ total-free total-mins))))))<br><br>(defun print-results ()<br>  (format t "AT&T -> T-Mobile myFaves Recommendations:~%")<br>  (format t "-----------------------------------------~%")<br>  (format t "According to our analysis of your call logs, these are your 5 most frequently dialed numbers.~%")<br>  (format t "-----------------------------------------~%~%")<br>  (loop for i from 0 to 4 do<br>    (format t "~A whom you spoke to for ~A minutes.~%~%" (car (aref *results* i)) (cdr (aref *results* i))))<br>  (format t "These numbers should be your myFaves as they accounted for ~A% of your total minutes.~%" (aref *results* 5)))<br><br>(init)<br>(find-faves)</pre><br><br>I'm sure it's not the prettiest, lispiest code out there but it could be an awful lot worse. Also, sbcl emitted style-warnings when the script was run. This behavior surprised me a little bit. After all, if I'm <i>running</i> the script I have little need for the style-warnings. After some digging, I learned enough to write <a href="http://redlinernotes.com/sbcl/fix.patch.txt">this patch</a> for the program which suppressed the undesirable output. I hope to submit a patch to the SBCL manual in the next week or so that notes this may be desired as nothing on <a href="http://www.sbcl.org/manual/Shebang-Scripts.html">the current page</a> regarding <code>sbcl --script</code> would indicate that any output from the compiler would appear.

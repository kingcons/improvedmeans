;;;;;
title: HTDP Section 04
tags: HTDP, LISP, Self-Learning
date: 2008-05-19 14:13:12
format: html
;;;;;
Well, here's Section 04.<br><!--more--><br>Resources:<br>Read: Section <a href="http://www.htdp.org/2003-09-26/Book/curriculum-Z-H-7.html">04</a><br>Watch: Nothing. To my knowledge there are no online lectures based around HTDP. Correct me if Iâ€™m wrong.<br>Checked against: Nothing.<br><br>Exercises<br><br>4.1.1:<br>1. (and true true) -> true<br>2. (or true false) -> true<br>3. (not false)     -> true<br><br>4.1.2:<br>1. (a) true,  (b) false, (c) true<br>2. (a) false, (b) false, (c) true<br>3. (a) false, (b) false, (c) false<br><br>4.2.1:<br><pre><br>;;1.<br>(define (is-between-3-and-7? n)<br>  (and (> n 3) (<= n 10)))<br><br>;;2.<br>(define (is-between-3-7? n)<br>  (and (> n 3) (< n 10)))<br><br>;;3.<br>(define (is-between-3-9? n)<br>  (and (>= n 3) (< n 9)))<br><br>;;4.<br>(define (is-1-3-or-9-11? n)<br>  (or (is-1-3? n) (is-9-11? n)))<br><br>(define (is-1-3? n)<br>  (and (> n 1) (< n 3)))<br><br>(define (is-9-11? n)<br>  (and (> n 9) (< n 11)))<br><br>;;alternate implementation in case the first smacks of premature optimization:<br>;;(both suffer from an ominous arbitrary function naming schema!)<br>(define (is-1-3-or-9-11? n)<br>  (or (and (> n 1) (< n 3))<br>      (and (> n 9) (< n 11))))<br><br>;;5.<br>(define (is-outside-1-3? n)<br>  (not (and (>= n 1) (<= n 3))))</pre><br>4.2.2:<br><pre><br>;; 1. | | | | | | | | | | |<br>;;   -5         0         5<br>;;        (-----)<br>;; Contract: in-interval-1? : number -> boolean<br>;; Purpose: To test if a number is between -3 and 0.<br>(in-interval-1? -2)<br>(and (< -3 -2) (< -2 0))<br>(and true true)<br>true<br><br>;;2.  | | | | | | | | | | |<br>;;    0         5         10<br>;;    --) (----------------<br>;; Contract: in-interval-2? : number -> boolean<br>;; Purpose: To test if a number is less than 1 or greater than 2.<br>(in-interval-2? -2)<br>(or (< -2 1) (> -2 2))<br>(or true false)<br>true<br><br>;;3.  | | | | | | | | | | |<br>;;    0         5         10<br>;;    --)       (----------<br>;; Contract: in-interval-3? : number -> boolean<br>;; Purpose: To test if a number is less than 1 or greater than 5.<br>(in-interval-3? -2)<br>(not (and (<= 1 -2) (<= -2 5)))<br>(not (and false true))<br>(not false)<br>true</pre><br>4.2.3:<br><pre><br>;;1.<br>(define (is-solution-1? x)<br>  (= (+ (* 4 x) 2) 62))<br><br>;;2.<br>(define (is-solution-2? x)<br>  (= (* (sqr x) 2) 102))<br><br>;;3.<br>(define (is-solution-3? x)<br>  (= (+ 2 (* 4 (sqr x)) (* 6 x)) 462))</pre><br>10 is a solution to 3. 12 and 14 are not solutions.<br><br>4.2.4:<br><pre><br>;; I don't know what specific test cases the authors are referring to for problems 2.2.1 - 2.2.4 so I'll just make up a few.<br>(= (Fahrenheit->Celsius 32) 0)<br>(= (dollar->euro 20) 12.8399) ;; as of 05/18/08<br>(= (triangle 5 2) 5)<br>(= (convert3 9 2 7) 729)</pre><br>4.3.1:<br>The left cond is legal. The right cond is illegal because it's second clause has no answer to evaluate. The last cond is illegal because it has no second clause to evaluate.<br><br>4.3.2:<br>(a) .040<br>(b) .045<br>(c) .060<br><br>4.3.3:<br>(a) 40<br>(b) 121<br>(c) 595<br><br>4.4.1:<br><pre><br>(define (interest x)<br>  (cond ((<= x 1000) (* .04 x))<br>        ((<= x 5000) (* .045 x))<br>        (else (* .05 x))))</pre><br>4.4.2:<br><pre><br>(define (tax x)<br>  (cond ((<= x 240) 0)<br>        ((<= x 480) (* .15 x))<br>        (else (* .28 x))))<br><br>(define (netpay hrs)<br>  (- (grosspay hrs) (tax (grosspay hrs))))<br><br>(define (grosspay hrs)<br>  (* 12 hrs))</pre><br>4.4.3:<br><pre><br>(define (pay-back charges)<br>  (cond ((<= charges 500) (* .025 charges))<br>        ((<= charges 1500) (* .05 charges))<br>        ((<= charges 2500) (* .075 charges))<br>        (else (* .01 charges))))</pre><br>4.4.4:<br><pre><br>(define (how-many a b c)<br>  (cond ((> (sqr b) (* 4 a c)) 2)<br>        ((= (sqr b) (* 4 a c)) 1)<br>        ((< (sqr b) (* 4 a c)) 0))) ;; or else 0))<br>;; (how-many 1 0 1) = 0</pre><br><br>If we didn't assume the equation was proper we'd need to check (with<br>a cond) to see if a equaled 0 and return an error if it did.<br><br>That does it for Section 04. Hopefully, I'll get my act together and wrap up SICP Section 2.1 in the next week or so. :-) You've gotta work on some hard stuff too, right? Besides it's more interesting anyway.

;;;;;
title: From Distro-Hopping to Good Easy
tags: Linux, Pics
date: 2008-07-07 17:47:20
format: html
;;;;;
Linux is a complicated beast. Unlike Windows and Mac there are literally hundreds of different competing versions or distributions vying for attention and often catering to a specific niche. Beginning Linux users are often all waved towards the two or three most popular and general-purpose distributions and with good reason. While three distributions in particular (Ubuntu, Fedora, Suse) seem to dominate and are good places to start, I have often experienced a desire to see what else exists with Linux since there is so much in the way of choice. Additionally, Linux distributions tend to have one release or more a year while Windows and Mac tend to see a new version only every few years. The three distributions I mentioned earlier all strive to issue a new release every six months and they all do so at roughly the same time often with no more than a month separating them.<br><br>While this may at first seem undesirable there is no pressure to upgrade but there is also no cost to upgrade (remember, they're free!). Some upgrades have a few more bugs or new features than others but upgrades tend to be relatively safe and easy. Moreover, because of the regular releases large changes happen gradually and there is little to no learning curve. It's also worth noting that upgrading does not require you to reinstall the operating system. It's usually just an hour or two of downloading and a reboot.<br><br>So, "Distro Release Season" comes twice a year if you use Ubuntu, Fedora, or Suse. That's even better than Christmas! However, this release cycle rather disappointed me. Ubuntu's Hardy Heron was a bit buggier than I'd like. Fedora 9 seems better and better every time but they still lack a few software packages I want. To be honest, I've never been interested in Suse much. I'd also been meaning to move to a more stripped-down version of Linux for a long time. Ubuntu and Fedora come with a lot of bells and whistles that I may not necessarily need and that slow my system down.<br><br>It was time to try something new and, this season, I decided to go with <a href="http://www.archlinux.org/">Arch Linux</a>. I won't go too deeply into my decision to use Arch. There are a lot of very good things about it and though it's not easy the way Ubuntu is, it's simple and worth the effort you put into it. You can make it into whatever you want it to be and that's precisely what I've done. I've spent about a week setting it up to perform as I'd like and with the programs I'd like. I've documented the entire process and will post that here as my personal "<a href="http://diveintomark.org/archives/2007/03/15/good-easy-2007">Good Easy</a>". A good easy, for those who haven't heard of one, is a detailed description of someone's computer configuration. One reason I'd like to do one is that it's handy in case I have to duplicate it at some point in the future. It might be nice to do a Good Easy for my server at some point as well. I detail a bit at the end how to turn your installed system into a Live CD. I plan to do a little bit more work and remove personal data to turn that Live CD into something I could distribute at some point though mostly just to a few nerd friends. I wouldn't expect, or want, to take users from the wonderful Arch Linux after all.<br><br>My Good Easy...<br><!--more--><br><br><strong>Install:</strong><br>The installer may look a bit scary but it's not too bad. I would recommend partitioning your drive beforehand with Gparted or reusing existing partitions.<br><br>Set the mountpoints for ext3 partitions and the swap space. I'd hold off on NTFS partitions until later.<br>Install packages selecting base-devel packages and sudo, wireless-tools, ntfs-3g, netcfg and openssh. Go to configure system and allow automatic hardware detection and usb boot devices. In rc.conf, set hostname and timezone, then set eth0="dhcp". We'll be adjusting this later but that's enough for now. In locales make sure that the locales you want are uncommented, then write and exit. Set the root password and nearest pacman mirror then return to the main menu. Install grub to your boot drive once you've added any necessary boot entries. You're done with the base install! Reboot and login as root.<br><br><strong>Some Basics (A new user, ssh, sound):</strong><br>Add any partitions to /etc/fstab that you didn't initially and create mountpoints for them. Use ntfs-3g for NTFS partitions.<br>Insert 'sshd: ALL' rights for ssh to /etc/hosts.allow and add sshd to the daemons list in /etc/rc.conf, then run the adduser command and give wheel, storage, audio, video, optical groups to the new user. Edit /etc/sudoers and comment out the line for the wheel group. Logout by typing exit at the command prompt and try logging back in as the new user.<br><br>To get sound working, run sudo pacman -Sy alsa-lib alsa-utils, then run amixer set Master 90% unmute and amixer set PCM 85% unmute and sudo alsactl store.<br><br>Then add alsa to the /etc/rc.conf daemons list.<br><br><strong>GUIs GUIs GUIs! ...and a login manager:</strong><br>Install the xorg group with <code>sudo pacman -Sy xorg</code> then check drivers with <code>sudo pacman -Ss xf86-video</code> and install one appropriate for your video card. For a window manager, install xmonad, openbox, gmrun, xcompmgr, openbox-themes and obconf like so: <code>sudo pacman -Sy xmonad openbox gmrun xcompmgr openbox-themes obconf</code>. For a login manager, install slim, archlinux-themes-slim and slim-themes with pacman and add slim to the daemons<br>in /etc/rc.conf. Then edit /etc/slim.conf to set themes to archlinux-retro,subway,fingerprint and set sessions to openbox,xmonad.<br>I use Openbox as my Window Manager at this point but hope to experiment with Xmonad down the line.<br><br>To get menumaker installed from the AUR (Arch User Repository) follow these instructions (you probablya want this):<code><br>mkdir -p ~/.config/openbox and cp /etc/xdg/openbox/* ~/.config/openbox/<br>mkdir ~/builds<br>cd ~/builds<br>wget http://aur.archlinux.org/packages/menumaker/menumaker.tar.gz && tar -zxvf *.gz<br>cd menumaker && makepkg -s && sudo pacman -U *.pkg.tar.gz && mmaker -vf openbox</code><br><br>For a system tray, I recommend stalonetray. Install it like so:<code><br>cp /etc/stalonetrayrc ~/.stalonetrayrc<br>nano ~/.stalonetrayrc</code> and change fuzzy_edges to 1, transparent to true, and icon gravity to NE.<br><br>I use the following pack so that I have icons for things but you may prefer another.<br><code>mkdir ~/.icons && cd ~/.icons<br>wget http://download22.mediafire.com/bdtdcgm4y1bg/49yjtxmu0z4/Crashbit.tar.bz2 && tar -zxvf Crash*.bz2</code><br><code>nano ~/.gtkrc-2.0</code> and insert<code><br># ~/.gtkrc-2.0<br>gtk-icon-theme-name = "Crashbit"</code><br><br>I add a run command to the Alt-F2 key by modifying the configuration files that come with Openbox.<br><code>nano ~/.config/openbox/rc.xml</code> and add this to the keyboard section:<code><br><keybind key="A-F2"><br><action name="execute"><execute>gmrun</execute></action><br></keybind><br><keybind key="C-A-L"><br><action name="Execute"><br><execute>xscreensaver-command -lock</execute><br></action><br></keybind></code><br><br>It's nice to have good wallpaper but I get bored with backgrounds after a while. What I do is dump a ton of good wallpapers (try <a href="http://www.desktopography.net/">Desktopography</a>, for example) into a Wallpapers folder and then have the script run each time I login (or if I suddenly want a new wallpaper). Start off by making the script.<br><br>nano ~/wallpaper.sh and add<br><code>#!/bin/bash<br>WALLPAPERS="/home/yourusername/path_to_your_wallpapers"<br>ALIST=( `ls -w1 /home/yourusername/path_to_your_wallpapers` )<br>RANGE=${#ALIST[@]}<br>let "number = $RANDOM"<br>let LASTNUM="`cat $WALLPAPERS/.last` + $number"<br>let "number = $LASTNUM % $RANGE"<br>echo $number > $WALLPAPERS/.last<br><br>feh --bg-scale $WALLPAPERS/${ALIST[$number]}</code><br><br>Note that those ` are backticks not single quotes('). I got a little tripped up by that. To make the script executable do the following.<br><code>chmod +x ~/wallpaper.sh && touch path_to_your_wallpapers/.last</code><br><br>I also like to run conky to monitor CPU usage, the current song playing, whether there are updates and other such things.<br><code>nano ~/.conkyrc</code> and insert the following.<br><br><code># Use Xft?<br>use_xft yes<br>xftfont Terminus 8<br><br># Update interval in seconds<br>update_interval 1<br><br># This is the number of times Conky will update before quitting.<br># Set to zero to run forever.<br>total_run_times 0<br><br># Create own window instead of using desktop (required in nautilus)<br>own_window  yes<br>own_window_transparent yes<br>own_window_type desktop<br>own_window_hints undecorate,sticky,skip_taskbar,skip_pager<br><br># Use double buffering (reduces flicker, may not work for everyone)<br>double_buffer yes<br><br># Minimum size of text area<br>minimum_size 512 16<br><br>maximum_width 1560<br><br># Draw shades?<br>draw_shades no<br><br># Draw outlines?<br>draw_outline no<br><br># Draw borders around text<br>draw_borders yes<br><br># Stippled borders?<br>stippled_borders 0<br><br># border margins<br>border_margin 6<br><br># border width<br>border_width 1<br><br># Default colors and also border colors<br>default_color 738A88<br>#default_shade_color white<br>#default_outline_color black<br>own_window_colour 3C4746<br><br># Text alignment, other possible values are commented<br>#alignment top_left<br>#alignment top_right<br>alignment bottom_left<br>#alignment bottom_right<br><br># Gap between borders of screen and text<br># same thing as passing -x at command line<br>gap_x 8<br>gap_y 8<br><br># Subtract file system buffers from used memory?<br>no_buffers yes<br><br># set to yes if you want all text to be in uppercase<br>uppercase no<br><br># number of cpu samples to average<br># set to 1 to disable averaging<br>cpu_avg_samples 2<br><br># number of net samples to average<br># set to 1 to disable averaging<br>net_avg_samples 2<br><br># Force UTF8? note that UTF8 support required XFT<br>override_utf8_locale yes<br><br># Add spaces to keep things from moving about?  This only affects<br>certain objects.<br>use_spacer none<br><br># Append this to TEXT on laptops...| ${color FCFCFC}${battery_percent}<br><br>TEXT<br>${time %H:%M} | ${exec date "+%A %e %B"} ${color} | cpu: ${color FCFCFC}${cpu}%${color} | mem: ${color FCFCFC}$memperc%${color} | down: ${color FCFCFC}${downspeed eth0}kb/s${color} | up: ${color FCFCFC}${upspeed eth0}kb/s${color} | uptime: ${color FCFCFC}${uptime}${color} | root drive: ${color FCFCFC}${fs_used /} / ${fs_size /}${color} | music: ${color FCFCFC}${mpd_title 32}${color} | updates: ${color FCFCFC}${texeci 3600 perl ~/scripts/arch-updates/conky-updates.pl}</code><br><br>I should also note that the all of the stuff under text should be on one line.<br><br>To check for software updates we need to do a little more work.<br><code>mkdir ~/scripts/arch-updates && nano ~/scripts/arch-updates/conky-updates.pl</code> to insert:<br><br><code>#! /usr/bin/perl -w<br>use strict;<br># November 15, 2006<br># Daniel Vredenburg (Vredfreak)<br># This is a program that checks for package updates for Arch Linux<br>users.<br><br>open (MYINPUTFILE, "/home/yourusername/scripts/arch-updates/updates.log") or die "No such file or directory: $!";<br><br>my $i = 0;<br>while()<br>{<br>if (/^(.*)\/(.*)(\..*\..*\.)/)  {<br>#print " \n";<br>$i++;<br>}<br><br>}<br>if ($i == 0) {<br>print "up to date";<br>} else {<br>print "available ($i)";<br>}<br>close(MYINPUTFILE);</code><br><br>Thanks again to Daniel for this script. Make the script executable next.<br><code>chmod +x ~/scripts/arch-updates/conky-updates.pl</code><br><br>There's yet more to do for the update notifications.<br><code>nano ~/scripts/arch-updates/pacsync.sh</code> and insert:<br><br><code>#!/bin/bash<br><br># This issues a command to 1. Sync the package database,<br># 2. Check for upgradable packages, 3. print the URL of any possible<br>upgrade.<br># The output of our command gets written to updates.log, which we will<br>use<br># conky_updates.sh to parse to see if there are any available updates.<br><br>pacman -Syup --noprogressbar > /home/yourusername/path/to/updates.log</code><br><br><code>touch /home/yourusername/path/to/updates.log && sudo cp ~/scripts/arch-updates/pacsync.sh /etc/cron.hourly/</code><br>Thanks again to Daniel Vredenburg (Vredfreak) for this great script.<br><br>To tie it all together, we'll now write the startup script that tells what window manager and programs to start on login.<br><code>nano ~/.xinitrc</code> and add this:<br><code>#!/bin/sh<br>#xcompmgr -cC & ;;uncomment this if you want compositing enabled (for true transparency, drop shadows, etc.)<br>~/wallpaper.sh & ;;the wallpaper script<br>xscreensaver -no-splash & ;;a screensaver program<br>thunar --daemon & ;;to keep the file manager checking for flash drives, cds, etc, being plugged in<br>/usr/lib/wicd/tray.py & ;; a networking and wireless client<br><br>DEFAULT_SESSION=twm<br><br>case $1 in<br>openbox)<br>(sleep 1 && stalonetray) & ;; start the system tray<br>conky &<br>exec /usr/bin/openbox-session<br>;;<br>xmonad)<br>/home/redline/scripts/dzconky &<br>exec /usr/bin/xmonad<br>;;<br>*)<br>exec $DEFAULT_SESSION<br>;;<br>esac</code><br><br>This script will log you into the twm window manager unless you hit F1 at the login screen. If you do, it will toggle between Openbox and Xmonad as the window manager.<br><br><strong>The Good Easy:</strong><br>The following command will install most of the cool and useful programs in the known universe including a bunch of programming languages, a version control system, IM client, Movie and Music players, and of course Firefox. All we're down to now is fine tuning and (optionally) making a Live CD of the installed system.<br><br><code>sudo pacman -S mercurial xarchiver pidgin feh rxvt-unicode firefox flashplugin gforth ruby lua erlang ghc python sbcl drscheme emacs thunar mc xmonad xmonad-contrib openbox mplayer mplayer-plugin mpd ncmpc sonata codecs dzen2 transmission rtorrent conky epdfview libnotify libdvdread libdvdcss libdvdnav lynx dvd+rw-tools ttf-ms-fonts ttf-dejavu terminus-font zip unzip hicolor-icon-theme xchm scrot gqview stalonetray xscreensaver virtualbox thunar-volman qt3 sdl amule transset-df</code><br><br>Configure thunar-volman by opening thunar and going to edit->preferences->advanced, then enabling volume management and<br>clicking configure. This will finish enabling you to hotplug flash drives, cds, dvds, etc and have them automount properly.<br><br>Virtualbox was one of the programs installed and will enable you to try out or use other Operating Systems as VMs like VMWare or Parallels. Enable it for your account with the following:<br>Run <code>sudo gpasswd -a yourusername vboxusers</code> and then add vboxdrv to the modules section in /etc/rc.conf.<br><br>MPD and Sonata are the music players installed. You could write a book on all the different ways to use MPD (including as a home music server!) but for a lone workstation the following configuration works well for me.<br><code>sudo cp /etc/mpd.conf.example /etc/mpd.conf<br>sudo nano /etc/mpd.conf</code><br>Change the user from mpd to your username and change the music and playlists directories making sure they are uncommented, then run:<br><code>sudo chown -R yourusername:users /var/lib/mpd/*<br>sudo touch /var/run/mpd/mpd.pid<br>sudo chown -R yourusername:users /var/run/mpd/*<br>mkdir ~/Music/Playlists<br>mpd --create-db<br>sudo chown -R yourusername:users /var/log/mpd/*</code><br>Add mpd to the daemons list in /etc/rc.conf, then run <code>nano .config/sonata/sonatarc</code> and add your username and password to the audioscrobbler section and set use_audioscrobbler to True if you want to enable it to scrobble your tracks to Last.FM.<br><br>There are a few programs we'll have to build ourselves to use. Our CD Burner, Xfburn is a good example. The following commands should get the job done.<br><code>cd ~/builds<br>wget<br>http://aur.archlinux.org/packages/xfburn/xfburn.tar.gz && tar -zxvf xfburn.tar.gz && cd xfburn && makepkg -s && sudo pacman -U *.pkg*</code>.<br><br>I use MIT-Scheme because I like it's interaction mode in Emacs and it's good for the SICP exercises. This program takes a few HOURS to compile though even with a powerful system and it can't be compiled on a system with less than 512mb of RAM, maybe less than 1GB. At any rate, you may not need it. If you do, I advise doing this:<br><code>cd ~/builds<br>wget<br>http://ftp.gnu.org/gnu/mit-scheme/snapshot.pkg/20080130/mit-scheme-c-20080130.tar.gz<br>&& tar -zxvf mit*.tar.gz && cd mit-scheme-c-20080130/src && etc/make-liarc.sh && make install && sudo cp etc/xscheme.el<br>/usr/share/emacs/site-lisp/ && cd /usr/bin && sudo ln -s /usr/local/bin/mit-scheme scheme</code><br>Then <code>nano .emacs</code> to insert <code>(require 'xscheme)</code> and save and exit.<br><br>I don't have an iPod. If you do you can probably just <code>sudo pacman -Sy gtkpod</code> and be in good shape but I use gnomad2 to load my music player with songs. To get it:<br><code>cd ~/builds<br>wget http://aur.archlinux.org/packages/gnomad2/gnomad2.tar.gz && tar -zxvf gnomad2.tar.gz && cd gnomad2 && makepkg -s && sudo pacman -U *.pkg*</code><br>Then <code>sudo nano /etc/sudoers</code> and insert this below %wheel All=(ALL) ALL:<br><code>%wheel ALL=NOPASSWD: /usr/bin/gnomad2<br>%wheel  ALL=NOPASSWD: /sbin/reboot</code><br>This will make it possible to add menu entries for gnomad2 and to reboot the system that don't require passwords to be entered.<br><br>To setup wireless install wicd with <code>sudo pacman -S wicd</code>.<br>Disable the network daemon and any network interfaces wicd should manage, then add hal and wicd to the daemons list in rc.conf and run <code>sudo gpasswd -a yourusername network</code>.<br><br>To create a mercurial repository so I can hack code and do a bit more work on the menu I run<br><code>cd ~ && hg clone http://redlinernotes.com/code<br>mmaker -vf openbox</code><br><br><strong>Fiddly Stuff:</strong><br>Now, we're done with most of the serious business. From here on out it's mostly fiddly stuff. Fixing application settings to my preferences and so on. You've come this far though, why not go all the way? :-)<br><br>I adjust some commands to menu.xml to make my life easier. This menu is the one that shows up when you right-click on the desktop, by the way.<br><code>nano ~/.config/openbox/menu.xml</code> and change the execute command for emacs to <code>urxvt -e emacs -nw</code> and the execute command for gnomad2 to <code>sudo gnomad2</code>. I'd also suggest adding an item that executes <code>sudo reboot</code>.<br><br>Make urxvt windows borderless and enable mouse control of window transparency by editing rc.xml and inserting:<br><code><application name="urxvt"><br><decor>no</decor><br></application></code><br>beneath <code><applications></code> and inserting<br><code><mousebind button="C-Up" action="Press"><br><action name="Execute"><br><execute>transset-df -p --inc 0.2</execute><br></action><br></mousebind><br><mousebind button="C-Down" action="Press"><br><action name="Execute"><br><execute>transset-df -p --min 0.2 --dec 0.2</execute><br></action><br></mousebind></code><br>beneath the frame context in mousebindings.<br><br>To get dzen to display something useful in Xmonad pipe our already finished conky script into it like so:<br><code>nano ~/scripts/dzconky</code> and insert:<br><code>#!/bin/sh<br><br>FG='#aaaaaa'<br>BG='#1a1a1a'<br>FONT='-*-terminus-*-r-normal-*-*-120-*-*-*-*-iso8859-*'<br>conky | dzen2 -e  -h '16' -w '1560' -ta r -fg $FG -bg $BG -fn $FONT</code><br><br>And then make it executable...<br><code>chmod +x ~/scripts/dzconky</code><br><br>The Xmonad config file will still need to be modified to work with that properly. I may or may not address that in an upcoming post.<br><br>The last thing I do is set the Openbox theme to Onyx with Obconf and go crazy perfecting my ~/.config/openbox/menu.xml file.<br>It's a bit big to quote here so I'll link to it as a sample. <a href="http://www.redlinernotes.com/docs/menu.xml">Here it is</a>.<br><br><strong>LARCH IT!</strong><br>The cool part of this is as least partly that after building your own version of Linux from the ground up (with some help from Arch's package system) that you can make a Live CD out of it and give it to your friends. Hopefully you won't leave personal information or data on it though. Then again, if you're using it as your own personal install CD there's no better way to go. Here's how to do it.<br><br><code>sudo nano /etc/pacman.conf</code> and insert this:<br><code>[larch5]<br>Server = ftp://ftp.berlios.de/pub/larch/larch5.3/i686/</code><br>then <code>sudo pacman -Syu && sudo pacman -S larch larchin larch-live larchify dosfstools</code>.<br><br>Finally, <code>sudo ./larchify /</code> to generate a restore/live cd image and burn it with <code>wodim -v dev=/dev/cdrw /.larch/mylivecd.iso</code>. Done and Done! Here's how it looks for me with everything finished. Click on the title of each picture for the high resolution version.<br><br>(Editor's Note: These pictures actually show the not quite finished system sans-transparency and the conky updates script. Also, at present wired connection users might as well not setup wicd as it won't autoconnect on boot though you can connect through it. Just leave dhcp enabled for eth0 in rc.conf.)<br><br><a href="http://www.redlinernotes.com/images/screenshots/070708_clean.jpg">Clean Desktop</a>:<br><img src="http://www.redlinernotes.com/images/screenshots/070708_clean.jpg" alt="Clean Desktop 07/07/08" /><br><br><a href="http://www.redlinernotes.com/images/screenshots/070708_dirty.jpg">Slightly Dirty Desktop</a>:<br><img src="http://www.redlinernotes.com/images/screenshots/070708_dirty.jpg" alt="Slighty Dirty Desktop 07/07/08" />
